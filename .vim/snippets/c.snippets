# principle: use the first three letters.

###------------------------------1.General--------------------------------###

# main()
snippet main
	int main(int argc, char const* argv[])
	{
		${1:/* code */}
		return 0;
	}
# ---------------------------------------------------------------------------

# printf, not as good as Textmate's
snippet pr
	printf("${1:%s}\n",${2:VAR});
	${3}
# ---------------------------------------------------------------------------

# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n",${3:VAR});
	${4}
# ---------------------------------------------------------------------------



###------------------------------2.Preprocessor---------------------------###

# #include <xxx.h>
snippet inc2 # include c header
	#include <${1:stdio}.h>
	${2}
#----------------------------------------------------------------------------

# #include "xxx.h"
snippet Inc
	#include "${1:`Filename("$1.h")`}"
	${2}
#----------------------------------------------------------------------------

# definde symbol
snippet def
	#define ${1:Symbol} ${2:Replacement}
	${3}
#----------------------------------------------------------------------------

# define macro
snippet Def
	#define ${1:MacroName}(${2:argument}) (${3:expression})
	${4}
#----------------------------------------------------------------------------

# ifdef
snippet ifd
	#ifdef ${1:Symbol}
	    ${2:/* whatever */}
	#endif
	${3}
#----------------------------------------------------------------------------

# ifndef
snippet ifn
	#ifndef $1
	#define ${1:Symbol} ${2:Value}
	#endif
	${3}
#----------------------------------------------------------------------------

# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_GUARD')`}
	#define $1

	${2}

	#endif /* end of include guard: $1 */
#----------------------------------------------------------------------------



#--------------------------------3.Flow Contorl ----------------------------#

# if statement
snippet if
	if (${1:/* condition */})
	{
		${2:/* code */}
	}
	${3}
#----------------------------------------------------------------------------

# else statement
snippet el
	else
	{
		${1:/* code */}
	}
	${2}
#----------------------------------------------------------------------------

snippet ifel
	if (${1:/* condition */})
	{
		${2:/* code */}
	}
	else
	{
		${3:/* code */}
	}
	${4}
#----------------------------------------------------------------------------

# 2-way branching
snippet tri
	${1:/* condition */} ? ${2:a} : ${3:b}
#----------------------------------------------------------------------------

# switch statement
snippet swi
	switch (${1:/* flag */})
	{
	    case ${2:/* condition 1 */} :
		{
		    ${3:/* processing code */}
		    break;
		}
	    case ${4:/* condition 1 */} :
		{
		    ${5:/* processing code */}
		    break;
		}
	    case ${6:/* condition 1 */} :
		{
		    ${7:/* processing code */}
		    break;
		}
	    default :
		{
		    ${8:/* unexpected case */}
		    break;
		}
	}
	${9}
#----------------------------------------------------------------------------

# case statement
snippet cas
	case ${1:/* condition */} :
	{
	    ${2:/* processing code */}
	    break;
	}
	${3}
#----------------------------------------------------------------------------

# for loop
snippet for
	for (unsigned ${2:i} = 0; $2 < ${1:count}; $2${3:++})
	{
		${4:/* code */}
	}
	${5}
#----------------------------------------------------------------------------

# Custom for loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++})
	{
		${5:/* code */}
	}
	${6}
#----------------------------------------------------------------------------

# while loop
snippet wh
	while (${1:/* condition */})
	{
		${2:/* code */}
	}
	${3}
#----------------------------------------------------------------------------

# do...while loop
snippet do
	do
	{
		${2:/* code */}
	} while (${1:/* condition */});
	${3}
#----------------------------------------------------------------------------



#--------------------------------4.Declarations-----------------------------#

# Function
snippet fun
	${1:bool} ${2:function_name}(${3:argument})
	{
		${4:/* code */}
		return true;
	}
	${5}
#----------------------------------------------------------------------------

# Typedef
snippet typ
	typedef ${1:int} ${2:MyCustomType};
	${3}
#----------------------------------------------------------------------------

# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`}
	{
		${2:/* data */}
	};
	${3}
#----------------------------------------------------------------------------

# Typedef struct
snippet typs
	typedef struct ${2:$1 }
	{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
#----------------------------------------------------------------------------

# enum declaration
snippet enu
	enum ${1:NAME}
	{
	    ${2:VALUE_1},
	    ${3:VALUE_2},
	    ${4:VALUE_3},
	};
	${5}
#----------------------------------------------------------------------------


